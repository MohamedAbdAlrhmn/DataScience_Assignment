train_age <- na.omit(train_dataset$Age)
train_age_avg <- mean(train_age)
train_dataset$Age[is.na(train_dataset$Age)] <- train_age_avg
# Change Age values to 0 = Adult(>=18), 1 = Child(<18) (label encoder)
#train_dataset$Age <- ifelse(train_dataset$Age<18, 1, 0)
train_dataset$Age = as.numeric(format(round(train_dataset$Age, 0)))
View(train_dataset)
normalize <- function(x) {
numerator <- x - min(x)
denomrator <- max(x) - min(x)
return (numerator/denomrator)
}
train_dataset$Pclass = normalize(train_dataset$Pclass)
Test_Fare <- na.omit(Test_data$Fare)
Test_Fare_avg <- mean(Test_Fare)
Test_data$Fare[is.na(Test_data$Fare)] <- Test_Fare_avg
test_length <- length(Test_data$Fare)
fare <- normalize(c(train_dataset$Fare, Test_data$Fare))
train_dataset$Fare <- fare[1:(length(fare)-test_length)]
Test_data$Fare <- fare[(length(fare)-test_length + 1): length(fare)]
train_dataset$Sex  = factor(train_dataset$Sex ,
levels = c('male','female'),
labels = c(0,1))
train_dataset$take.off[train_dataset$take.off == ''] <- 'S'
train_dataset$take.off  = factor(train_dataset$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
#Remove coulmn Cabin from training_dataset
Train_Data <- subset(train_dataset, select = -c(Cabin,Ticket))
View(Train_Data)
Test_age <- na.omit(Test_data$Age)
test_average_age <- mean(Test_age)
Test_data$Age[is.na(Test_data$Age)] <- test_average_age
Test_data$Age = as.numeric(format(round(Test_data$Age, 0)))
#Make normalization for Pclass
Test_data$Pclass = normalize(Test_data$Pclass)
Test_data$Sex  = factor(Test_data$Sex ,
levels = c('male','female'),
labels = c(0,1))
Test_data$take.off  = factor(Test_data$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
#Remove coulmn Cabin from testing_dataset
Test_data <- subset(Test_data, select = -c(Cabin,Ticket))
View(Test_data)
fitting_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age,
method="class", data=Train_Data)
#Decision tree model plotting(splited feature is Sex)
fancyRpartPlot(fitting_model)
# making prediction
Prediction <- predict(fitting_model, Test_data, type = "class")
#make Csv file with passenger_id and its assign(which passenger is survive or not)
submit <- data.frame(PassengerId = Test_data$PassengerId, Survived = Prediction)
#prediction result of decision tree
write.csv(submit, file = "Model_Result/Model_dtree_predict.csv", row.names = FALSE)
cfMatrix_rf <- confusionMatrix(
data = relevel(prediction, ref = "1"),
reference = relevel(Train_Data$Survived, ref = "1")
)
cfMatrix_rf <- confusionMatrix(
data = relevel(Prediction, ref = "1"),
reference = relevel(Train_Data$Survived, ref = "1")
)
View(train_dataset)
survived <- Train_Data$Survived
passengers <- Test_data$PassengerId
train <- Train_Data[,-c(1,2,6,7,9)]
View(train)
View(Train_Data)
View(train_dataset)
View(train)
View(train)
View(train)
View(train_dataset)
View(train_dataset)
View(Train_Data)
View(train)
View(train)
View(train)
View(train)
train <- Train_Data[,-c(1,3,7,8,9)]
View(train)
View(Train_Data)
train <- Train_Data[,-c(1,3,8,9)]
View(train)
View(Test_data)
View(train_dataset)
test <- test[,-c(1,3,8,9)]
test <- Test_data[,-c(1,3,8,9)]
View(test)
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
train <- Train_Data[,-c(1,3,8,9,10)]
View(Test_data)
View(train)
View(Test_data)
View(test)
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(PassengerId = passengers,Survived = knn_titanic)
write.csv(submission,'Results/KnnResults.csv')
write.csv(submission,'Model_Results/KnnResults.csv')
write.csv(submission,'Model_Result/KnnResults.csv')
View(Test_data)
submission <- data.frame(PassengerId = passengers,Survived = knn_titanic)
View(submission)
write.csv(submission,'Model_Result/KnnResults.csv')
submission <- data.frame(passengers,Survived = knn_titanic)
View(submission)
write.csv(submission,'Model_Result/KnnResults.csv')
View(train)
View(test)
survived <- Train_Data$Survived
passengers <- Test_data$PassengerId
View(Train_Data)
train <- Train_Data[,-c(1,3,8,9,10)]
View(train)
View(Test_data)
test <- Test_data[,-c(1,3,8,9)]
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(passengers,Survived = knn_titanic)
submission <- data.frame(PassengerId=passengers,Survived = knn_titanic)
View(submission)
write.csv(submission,file = 'Model_Result/KnnResults.csv', row.names = FALSE)
View(Train_Data)
train <- Train_Data[,-c(1,3,8,10)]
test <- Test_data[,-c(1,3,8)]
View(test)
View(train)
View(test)
View(Test_data)
#Train and test have the same features and same dimensions
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(PassengerId=passengers,Survived = knn_titanic)
write.csv(submission,file = 'Model_Result/KnnResults2.csv', row.names = FALSE)
train <- Train_Data[,-c(1,3,8,9,10)]
test <- Test_data[,-c(1,3,8,9)]
#Train and test have the same features and same dimensions
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(PassengerId=passengers,Survived = knn_titanic)
write.csv(submission,file = 'Model_Result/KnnResults.csv', row.names = FALSE)
install.packages("randomForest")
library(randomForest)
library(party)
install.packages("party")
library(party)
View(Train_Data)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
data = Train_Data)
y
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
data = Train_Data)
View(output.forest)
print(output.forest)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
method="class",data = Train_Data)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
method="classification",data = Train_Data)
View(output.forest)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
importance = TRUE,
proximity = TRUE,
data = Train_Data)
print(output.forest)
library(randomForest)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
importance = TRUE,
proximity = TRUE,
data = Train_Data)
View(train)
View(Train_Data)
print(output.forest)
library(randomForest)
output.forest <- randomForest(Survived ~ Age + Pclass + Sex + SibSp + Parch,
importance = TRUE,
proximity = TRUE,
data = Train_Data)
print(output.forest)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(e1071)
library(class)
setwd("F:/unversity/level4_subject/seecond_term/Distributed_computing/Assignment1/Titanic Disaster")
train_dataset<-read.table("train.csv",header = TRUE,sep = ",")
Test_data<-read.table("test.csv",header = TRUE,sep = ",")
train_age <- na.omit(train_dataset$Age)
train_age_avg <- mean(train_age)
train_dataset$Age[is.na(train_dataset$Age)] <- train_age_avg
# Change Age values to 0 = Adult(>=18), 1 = Child(<18) (label encoder)
train_dataset$Age <- ifelse(train_dataset$Age<18, 1, 0)
normalize <- function(x) {
numerator <- x - min(x)
denomrator <- max(x) - min(x)
return (numerator/denomrator)
}
train_dataset$Pclass = normalize(train_dataset$Pclass)
Test_Fare <- na.omit(Test_data$Fare)
Test_Fare_avg <- mean(Test_Fare)
Test_data$Fare[is.na(Test_data$Fare)] <- Test_Fare_avg
test_length <- length(Test_data$Fare)
fare <- normalize(c(train_dataset$Fare, Test_data$Fare))
train_dataset$Fare <- fare[1:(length(fare)-test_length)]
Test_data$Fare <- fare[(length(fare)-test_length + 1): length(fare)]
train_dataset$Sex  = factor(train_dataset$Sex ,
levels = c('male','female'),
labels = c(0,1))
train_dataset$take.off[train_dataset$take.off == ''] <- 'S'
train_dataset$take.off  = factor(train_dataset$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
Train_Data <- subset(train_dataset, select = -c(Cabin,Ticket))
View(Train_Data)
Test_age <- na.omit(Test_data$Age)
test_average_age <- mean(Test_age)
Test_data$Age[is.na(Test_data$Age)] <- test_average_age
Test_data$Age <- ifelse(Test_data$Age<18, 1, 0)
Test_data$Sex  = factor(Test_data$Sex ,
levels = c('male','female'),
labels = c(0,1))
Test_data$take.off  = factor(Test_data$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
Test_data <- subset(Test_data, select = -c(Cabin,Ticket))
View(Test_data)
fitting_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age,
method="class", data=Train_Data)
View(fitting_model)
#Decision tree model plotting(splited feature is Sex)
fancyRpartPlot(fitting_model)
# making prediction
Prediction <- predict(fitting_model, Test_data, type = "class")
#make Csv file with passenger_id and its assign(which passenger is survive or not)
submit <- data.frame(PassengerId = Test_data$PassengerId, Survived = Prediction)
#prediction result of decision tree
write.csv(submit, file = "Model_Result/Model_dtree_predict.csv", row.names = FALSE)
survived <- Train_Data$Survived
passengers <- Test_data$PassengerId
train <- Train_Data[,-c(1,3,8,9,10)]
test <- Test_data[,-c(1,3,8,9)]
#Train and test have the same features and same dimensions
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(PassengerId=passengers,Survived = knn_titanic)
write.csv(submission,file = 'Model_Result/KnnResults.csv', row.names = FALSE)
BayesTitanicModel<-naiveBayes(as.factor(Survived)~., Train_Data)
BayesPrediction<-predict(BayesTitanicModel, Test_data)
View(BayesTitanicModel)
summary(BayesPrediction)
output<-data.frame(Test_data$PassengerId, BayesPrediction)
View(output)
colnames(output)<-cbind("PassengerId","Survived")
View(output)
write.csv(output, file = 'Model_Result/NaiveBayesRes1.csv', row.names = F)
#Naive bayes accuracy =70.33%
typeof(survived)
#Naive bayes accuracy =70.33%
survived<- factor(survived,levels = c(0,1))
#Fitting SVM
classifier = svm(formula = survived ~ .,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
install.packages('e1071')
library(e1071)
classifier = svm(formula = survived ~ .,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
View(classifier)
Svm_prediction<-predict(classifier,Test_data )
Svm_prediction<-predict(classifier,Test_data )
Svm_prediction<-predict(classifier,Test_data )
classifier = svm(formula = survived ~ .,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
Svm_prediction<-predict(classifier,Test_data )
classifier = svm(formula = Survived ~Pclass + Sex + SibSp + Parch + Age,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
Svm_prediction<-predict(classifier,Test_data )
Svm_dframe<-data.frame(Test_data$PassengerId, Svm_prediction)
write.csv(Svm_dframe, file = 'Model_Result/SVMRes1.csv', row.names = F)
colnames(Svm_dframe)<-cbind("PassengerId","Survived")
View(Svm_dframe)
write.csv(Svm_dframe, file = 'Model_Result/SVMRes1.csv', row.names = F)
# Making the Confusion Matrix
cm = table(Test_data, Svm_prediction)
# Making the Confusion Matrix
cm = table(Test_data[-3], Svm_prediction)
View(Train_Data)
fitting_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
method="class", data=Train_Data)
fitting_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
method="class", data=Train_Data)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(e1071)
library(class)
setwd("F:/unversity/level4_subject/seecond_term/Distributed_computing/Assignment1/Titanic Disaster")
train_dataset<-read.table("train.csv",header = TRUE,sep = ",")
Test_data<-read.table("test.csv",header = TRUE,sep = ",")
train_age <- na.omit(train_dataset$Age)
train_age_avg <- mean(train_age)
train_dataset$Age[is.na(train_dataset$Age)] <- train_age_avg
# Change Age values to 0 = Adult(>=18), 1 = Child(<18) (label encoder)
train_dataset$Age <- ifelse(train_dataset$Age<18, 1, 0)
normalize <- function(x) {
numerator <- x - min(x)
denomrator <- max(x) - min(x)
return (numerator/denomrator)
}
#Making normalization for Pclass
train_dataset$Pclass = normalize(train_dataset$Pclass)
Test_Fare <- na.omit(Test_data$Fare)
Test_Fare_avg <- mean(Test_Fare)
Test_data$Fare[is.na(Test_data$Fare)] <- Test_Fare_avg
test_length <- length(Test_data$Fare)
fare <- normalize(c(train_dataset$Fare, Test_data$Fare))
train_dataset$Fare <- fare[1:(length(fare)-test_length)]
Test_data$Fare <- fare[(length(fare)-test_length + 1): length(fare)]
train_dataset$Sex  = factor(train_dataset$Sex ,
levels = c('male','female'),
labels = c(0,1))
#Handling missing values in Take_Off column
train_dataset$take.off[train_dataset$take.off == ''] <- 'S'
train_dataset$take.off  = factor(train_dataset$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
#Remove coulmn Cabin from training_dataset
Train_Data <- subset(train_dataset, select = -c(Cabin,Ticket))
View(Train_Data)
Test_age <- na.omit(Test_data$Age)
test_average_age <- mean(Test_age)
Test_data$Age[is.na(Test_data$Age)] <- test_average_age
Test_data$Age <- ifelse(Test_data$Age<18, 1, 0)
#Make normalization for Pclass
Test_data$Pclass = normalize(Test_data$Pclass)
Test_data$take.off  = factor(Test_data$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
View(Test_data)
Test_data$Sex  = factor(Test_data$Sex ,
levels = c('male','female'),
labels = c(0,1))
#Remove coulmn Cabin from testing_dataset
Test_data <- subset(Test_data, select = -c(Cabin,Ticket))
fitting_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
method="class", data=Train_Data)
#Decision tree model plotting(splited feature is Sex)
fancyRpartPlot(fitting_model)
# making prediction
Prediction <- predict(fitting_model, Test_data, type = "class")
#make Csv file with passenger_id and its assign(which passenger is survive or not)
submit <- data.frame(PassengerId = Test_data$PassengerId, Survived = Prediction)
#prediction result of decision tree
write.csv(submit, file = "Model_Result/Model_dtree_predict2.csv", row.names = FALSE)
survived <- Train_Data$Survived
passengers <- Test_data$PassengerId
train <- Train_Data[,-c(1,3,8,9,10)]
test <- Test_data[,-c(1,3,8,9)]
#Train and test have the same features and same dimensions
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
submission <- data.frame(PassengerId=passengers,Survived = knn_titanic)
write.csv(submission,file = 'Model_Result/KnnResults.csv', row.names = FALSE)
write.csv(submission,file = 'Model_Result/KnnResults2.csv', row.names = FALSE)
View(Train_Data)
#Fitting Naive bayes on training data
BayesTitanicModel<-naiveBayes(as.factor(Survived)~., Train_Data)
#Make prediction on testdata
BayesPrediction<-predict(BayesTitanicModel, Test_data)
summary(BayesPrediction)
output<-data.frame(Test_data$PassengerId, BayesPrediction)
#Rename Bayesprediction column to survived
colnames(output)<-cbind("PassengerId","Survived")
write.csv(output, file = 'Model_Result/NaiveBayesRes2.csv', row.names = F)
library(e1071)
survived<- factor(survived,levels = c(0,1))
classifier = svm(formula = Survived ~Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
Svm_prediction<-predict(classifier,Test_data )
Svm_dframe<-data.frame(Test_data$PassengerId, Svm_prediction)
colnames(Svm_dframe)<-cbind("PassengerId","Survived")
write.csv(Svm_dframe, file = 'Model_Result/SVMRes2.csv', row.names = F)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(e1071)
library(class)
setwd("F:/unversity/level4_subject/seecond_term/Distributed_computing/Assignment1/Titanic Disaster")
train_dataset<-read.table("train.csv",header = TRUE,sep = ",")
Test_dataset<-read.table("test.csv",header = TRUE,sep = ",")
View(train_dataset)
View(Test_dataset)
train_age <- na.omit(train_dataset$Age)
train_age_avg <- mean(train_age)
train_dataset$Age[is.na(train_dataset$Age)] <- train_age_avg
# Change Age values to 0 = Adult(>=18), 1 = Child(<18) (label encoder)
train_dataset$Age <- ifelse(train_dataset$Age<18, 1, 0)
normalize <- function(x) {
numerator <- x - min(x)
denomrator <- max(x) - min(x)
return (numerator/denomrator)
}
#Making normalization for Pclass
train_dataset$Pclass = normalize(train_dataset$Pclass)
Test_Fare <- na.omit(Test_dataset$Fare)
Test_Fare_avg <- mean(Test_Fare)
Test_dataset$Fare[is.na(Test_data$Fare)] <- Test_Fare_avg
Test_Fare <- na.omit(Test_dataset$Fare)
Test_Fare_avg <- mean(Test_Fare)
Test_dataset$Fare[is.na(Test_dataset$Fare)] <- Test_Fare_avg
test_length <- length(Test_dataset$Fare)
fare <- normalize(c(train_dataset$Fare, Test_dataset$Fare))
train_dataset$Fare <- fare[1:(length(fare)-test_length)]
Test_dataset$Fare <- fare[(length(fare)-test_length + 1): length(fare)]
train_dataset$Sex  = factor(train_dataset$Sex ,
levels = c('male','female'),
labels = c(0,1))
#Handling missing values in Take_Off column
train_dataset$take.off[train_dataset$take.off == ''] <- 'S'
train_dataset$take.off  = factor(train_dataset$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
#Remove coulmn Cabin from training_dataset
Train_Data <- subset(train_dataset, select = -c(Cabin,Ticket))
Test_age <- na.omit(Test_dataset$Age)
test_average_age <- mean(Test_age)
Test_dataset$Age[is.na(Test_dataset$Age)] <- test_average_age
Test_data$Age <- ifelse(Test_data$Age<18, 1, 0)
#Make normalization for Pclass
Test_data$Pclass = normalize(Test_data$Pclass)
Test_dataset$Age <- ifelse(Test_dataset$Age<18, 1, 0)
#Make normalization for Pclass
Test_dataset$Pclass = normalize(Test_dataset$Pclass)
Test_data$Sex  = factor(Test_data$Sex ,
levels = c('male','female'),
labels = c(0,1))
Test_dataset$Sex  = factor(Test_dataset$Sex ,
levels = c('male','female'),
labels = c(0,1))
Test_dataset$take.off  = factor(Test_dataset$take.off ,
levels = c('C','Q','S'),
labels = c(0,1,2))
#Remove coulmn Cabin from testing_dataset
Test_dataset <- subset(Test_dataset, select = -c(Cabin,Ticket))
Dtree_model <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
method="class", data=Train_Data)
#Decision tree model plotting(splited feature is Sex)
fancyRpartPlot(Dtree_model)
# making prediction
Prediction_of_model <- predict(Dtree_model, Test_dataset, type = "class")
#make Csv file with passenger_id and its assign(which passenger is survive or not)
DTree_csv <- data.frame(PassengerId = Test_dataset$PassengerId, Survived = Prediction)
#make Csv file with passenger_id and its assign(which passenger is survive or not)
DTree_csv <- data.frame(PassengerId = Test_dataset$PassengerId, Survived = Prediction_of_model)
#prediction result of decision tree
write.csv(submit, file = "Model_Result/Model_dtree_predict3.csv", row.names = FALSE)
#prediction result of decision tree
write.csv(DTree_csv, file = "Model_Result/Model_dtree_predict3.csv", row.names = FALSE)
View(train_dataset)
View(Train_Data)
survived <- Train_Data$Survived
passengers <- Test_data$PassengerId
passengers <- Test_dataset$PassengerId
#Remove coulmn Cabin from testing_dataset
Test_data <- subset(Test_dataset, select = -c(Cabin,Ticket))
#Remove coulmn Cabin from testing_dataset
Test_data <- subset(Test_dataset, select = -c(Cabin,Ticket))
#Remove coulmn Cabin from testing_dataset
Test_dataset <- subset(Test_dataset, select = -c(Cabin,Ticket))
test <- Test_dataset[,-c(1,3,8,9)]
train <- Train_Data[,-c(1,3,8,9,10)]
#Train and test have the same features and same dimensions
knn_titanic <- knn(train, test, survived, k = 5,  l = 0, prob = FALSE, use.all = TRUE)
KNN_CSV <- data.frame(PassengerId=passengers,Survived = knn_titanic)
#Fitting Naive bayes on training data
Bayes_model<-naiveBayes(as.factor(Survived)~., Train_Data)
#Make prediction on testdata
BayesPrediction<-predict(Bayes_model, Test_dataset)
summary(BayesPrediction)
Naive_csv<-data.frame(Test_dataset$PassengerId, BayesPrediction)
#Rename Bayesprediction column to survived
colnames(Naive_csv)<-cbind("PassengerId","Survived")
library(e1071)
survived<- factor(survived,levels = c(0,1))
classifier = svm(formula = Survived ~Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
SVM_classifier = svm(formula = Survived ~Pclass + Sex + SibSp + Parch + Age + Fare + take.off,
data = Train_Data,
type = 'C-classification',
kernel = 'linear')
Svm_prediction_model<-predict(SVM_classifier,Test_dataset )
Svm_dtframe<-data.frame(Test_dataset$PassengerId, Svm_prediction_model)
colnames(Svm_dtframe)<-cbind("PassengerId","Survived")
View(Train_Data)
View(train)
View(train_dataset)
View(train)
View(test)
View(train)
View(train)
